{
  "name": "Ipl-data-visualization",
  "tagline": "Interactive web map for IPL match data",
  "body": "# IPL-Data-Visualization\r\nInteractive web map for IPL match data from 04/18/2008 to 05/20/2016. The interactive map can be found at http://rpubs.com/ysharc/184185\r\n\r\n## Quick Usage\r\n  1. Download IPL match data from http://cricsheet.org/downloads/ipl_csv.zip\r\n  2. Extract it in any folder of your choice and run collect.py from the same folder (if running from a different location change the path of the files in collect.py)\r\n  3. Now for plotting the data run plot.R in RStudio to view the map instantly (if running in the R console, execute the next command to export it to a html file)\r\n    1. library(htmlwidgets)\r\n    2. saveWidget(map, file=\"map.html\")  \r\n\r\n##Quick Look\r\n  1. Map starts with an overview of all IPL matches played until now.\r\n     ![alt tag](http://imgur.com/VvZKdpQ)\r\n  2. Select a subgroup to view their respective cluster. (For example kolkatta_wins in the following image)\r\n     ![alt tag](http://imgur.com/SjNf6Uq)\r\n  3. Hover mouse over a cluster point to see the area it covers\r\n     ![alt tag](http://imgur.com/JnZuRla)\r\n  4. zoom in to see the spread of the group\r\n     ![alt tag](http://imgur.com/O0O6xKZ)   \r\n  5. At the final zoom level click the cluster to display a spiderweb of all the matches that took place in it.\r\n     ![alt tag](http://imgur.com/T7atVeM)\r\n  6. The starting point of the spiral contains early day matches, where as the last point contains the latest match\r\n     ![alt tag](http://imgur.com/eQycYSx)\r\n     ![alt tag](http://imgur.com/8MpGfcU)\r\n\r\n## Process\r\n  The interactive map creation can be summarized by the collection and plot parts. The overview of the processes and code are explained below\r\n\r\n######Data Collection\r\n  Download the Total IPL match data from http://cricsheet.org/downloads/ipl_csv.zip . The archive contains a csv file for every match of the event. Each file typically contains the following structure\r\n\r\nversion\t| 1\t\t\t| ''\r\n------- | --------------------- | ------------------------------------------------\r\ninfo\t| team\t\t\t| Delhi Daredevils\r\ninfo\t| team\t\t\t| Sunrisers Hyderabad\r\ninfo\t| gender\t\t| male\r\ninfo\t| season\t\t| 2016\r\ninfo\t| date\t\t\t| 5/20/2016\r\ninfo\t| competition\t\t| Indian Premier League\r\ninfo\t| match_number\t\t| 52\r\ninfo\t| venue\t\t\t| Shaheed Veer Narayan Singh International Stadium\r\ninfo\t| city\t\t\t| Raipur\r\ninfo\t| toss_winner\t\t| Delhi Daredevils\r\ninfo\t| toss_decision\t   \t| field\r\ninfo\t| player_of_match\t| KK Nair\r\ninfo\t| umpire\t\t| A Nand Kishore\r\ninfo\t| umpire\t\t| BNJ Oxenford\r\ninfo\t| reserve_umpire\t| YC Barde\r\ninfo\t| tv_umpire\t\t| VK Sharma\r\ninfo\t| match_referee\t\t| S Chaturvedi\r\ninfo\t| winner\t\t| Delhi Daredevils\r\ninfo\t| winner_wickets\t| 6\r\n\r\nThe remaining lines contain ball to ball info of the two innings, but the columns are inconsistent. For example a normal ball contains 8 columns where as a wicket contains 11 columns. Using `glob` library extract all the names of the csv files to access \r\n```\r\n   file_names = glob.glob('*.csv')\r\n``` \r\n\r\nNext using the `csv` library open an input file, create a writer object and create the header\r\n```\r\nwith open('input_data.csv','wb') as input_file:\r\n   writer = csv.writer(input_file,quoting=csv.QUOTE_ALL)\r\n   writer.writerow(['Match','Season','date','venue','city','lat','lon','Winner','sf'])\r\n```\r\n\r\nWith the `input_file` open iterate over every file name  in the list `file_names` and extract info using the `pandas` library. For example extract the date of each match as shown below\r\n```\r\nfor filename in file_names:\r\n\r\n        df = pd.read_csv(filename, warn_bad_lines=False, error_bad_lines=False)\r\n\r\n        date = df.loc[df['version']=='date'].iloc[0,1]\r\n```\r\n\r\nExtract whatever features you want to plot on the map, here in this example the match,date and winner are plotted. The next important step is to collect co-ordinates of the location using any geocoding API or webscraping. Here in this example the nominatim search is used to query for co-ordinates(more info on parameters at http://wiki.openstreetmap.org/wiki/Nominatim#Parameters).\r\n\r\nUsing the `requests` and `beautifulsoup` libraries collect and scrape the data you need. \r\n```\r\n            response = session.get('http://nominatim.openstreetmap.org/search.php?q='+venue.replace(' ','+')+'&polygon=1&viewbox=')\r\n\r\n            soup = bs4.BeautifulSoup(response.text,'html.parser')\r\n\r\n            required_element = str(soup.select('script'))\r\n\r\n            phrase = re.compile('nominatim_results(.*?)\\[(.*?)\\]')\r\n\r\n            ans = phrase.search(required_element)\r\n\r\n            lat_lon_str = ans.group()\r\n\r\n            lat_pattern = re.compile(ur'lat\": \"(.*?)\"')\r\n\r\n            lat = lat_pattern.search(lat_lon_str)\r\n\r\n            lon_pattern = re.compile(ur'lon\": \"(.*?)\"')\r\n\r\n            lon = lon_pattern.search(lat_lon_str)\r\n\r\n```\r\n\r\nNow that you have collected all the data needed, update our input file with the info gathered\r\n```\r\n            writer.writerow([match,season,date,venue,city,venue_lat_lon[(venue,city)][0],venue_lat_lon[(venue,city)][1],winner,sf])\r\n```\r\n\r\nFinally you have the input_data.csv file created with all the info you wanted, now moving on to the plot process.\r\n\r\n###### Plotting\r\n  In this process we create interactive web maps using `leaflet` and `htmltools` packages of `R`. The first step is to read in the data we created in the previous process\r\n```\r\nIPL = read.csv(\"input_data.csv\")\r\n``` \r\n\r\n  Create subsets of the dataframe for analyzing the win locations of each team. For example\r\n```\r\nchennai_wins <- IPL[which(IPL$Winner =='Chennai Super Kings'),]\r\n```\r\n\r\n  Next create icons for each team to display on the map \r\n```\r\nteamIcons <- iconList(\r\n  csk = makeIcon(\"csk.png\", iconWidth=36,iconHeight=36),\r\n  dc = makeIcon(\"dc.png\", iconWidth=36,iconHeight=36),\r\n  dd = makeIcon(\"dd.png\", iconWidth=36,iconHeight=36),\r\n  gl = makeIcon(\"gl.png\", iconWidth=36,iconHeight=36),\r\n  kxp = makeIcon(\"kxp.png\", iconWidth=36,iconHeight=36),\r\n  ktk = makeIcon(\"ktk.png\", iconWidth=36,iconHeight=36),\r\n  kkr = makeIcon(\"kkr.png\", iconWidth=36,iconHeight=36),\r\n  mi = makeIcon(\"mi.png\", iconWidth=36,iconHeight=36),\r\n  pw = makeIcon(\"pw.png\", iconWidth=36,iconHeight=36),\r\n  rr = makeIcon(\"rr.png\", iconWidth=36,iconHeight=36),\r\n  rps = makeIcon(\"rps.png\", iconWidth=36,iconHeight=36),\r\n  rcb = makeIcon(\"rcb.png\", iconWidth=36,iconHeight=36),\r\n  sh = makeIcon(\"srh.png\", iconWidth=36,iconHeight=36),\r\n  t = makeIcon(\"draw.png\", iconWidth=36,iconHeight=36)\r\n)\r\n```\r\n\r\n  Now initialize the map and set the basemaps.\r\n```\r\nmap <- leaflet(IPL) %>% \r\n  \r\n  #overlay groups\r\n  addTiles(group = \"OSM (default)\") %>%\r\n  addProviderTiles(\"Esri.WorldGrayCanvas\", group = \"Esri.WorldGrayCanvas\") %>%\r\n\r\n```\r\n\r\n  Next add markers and cluster options to the data and finally add overlay Controls.\r\n```\r\naddMarkers(data=IPL,icon=~teamIcons[IPL$sf], group = \"IPL\",popup = ~htmlEscape(paste(Match,\"***\",date,\"***\",\"Winner: \",Winner)),clusterOptions = markerClusterOptions()) %>%\r\n  addMarkers(data=Matches_that_tied,icon=~teamIcons[Matches_that_tied$sf], group = \"Matches_that_tied\",popup = ~htmlEscape(paste(Match,\"***\",date,\"***\",\"Winner: \",Winner)),clusterOptions = markerClusterOptions()) %>%\r\n  \r\n  # Layers control\r\n  addLayersControl(\r\n    overlayGroups = c(\"OSM (default)\", \"Esri.WorldGrayCanvas\"),\r\n    baseGroups = c(\"IPL\",\"Matches_that_tied\"),\r\n    options = layersControlOptions(collapsed = FALSE)\r\n  )\r\n```\r\n\r\n#References\r\n  1. http://nominatim.openstreetmap.org/search\r\n  2. http://rstudio.github.io/leaflet/",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}